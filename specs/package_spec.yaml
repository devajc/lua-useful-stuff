specify package:
- before: |
    M = require "std.package"

    extends      = package
    extensions   = { "dirsep", "pathsep", "path_mark",  "execdir", "igmark" }
    enhancements = {}

    -- Do not try to check all the entries in unextended package,
    -- because they naturally change as modules are loaded.
    coreapis   = { "config", "cpath", "loaders", "loadlib", "preload",
                   "searchers", "searchpath", "seeall" }

- context when required:
  - before:
      enhanced = {}
      for _, api in ipairs (enhancements) do enhanced[api] = true end

  - context by name:
    - before:
        for _, api in ipairs (enhancements) do
          extends[api] = M["_" .. api]
        end
        for _, api in ipairs (extensions) do extends[api] = nil end
    - after:
        for _, api in ipairs (enhancements) do
          extends[api], extends["_" .. api] = M[api], M["_" .. api]
        end
        for _, api in ipairs (extensions) do extends[api] = M[api] end
    - it does not perturb the global table:
        for _, api in ipairs (extensions) do
          expect (extends[api]).should_be (nil)
        end
        for _, api in ipairs (enhancements) do
          expect (extends[api]).should_be (M["_" .. api])
        end
    - it contains all global access points:
        for _, api in ipairs (coreapis) do
          if enhanced[api] then
            expect (M[api]).should_not_be (extends[api])
          else
            expect (M[api]).should_be (extends[api])
          end
        end

  - context via the std module:
    - before:
        require "std"
    - it adds extension apis to the global table:
        for _, api in ipairs (extensions) do
          expect (extends[api]).should_be (M[api])
        end
    - it does not add any other global access points:
        for _, api in ipairs (coreapis) do
          if not enhanced[api] then
            expect (M[api]).should_be (extends[api])
          end
        end

- "it splits package.config up":
    expect (string.format ("%s\n%s\n%s\n%s\n%s\n",
            M.dirsep, M.pathsep, M.path_mark, M.execdir, M.igmark)
    ).should_contain (package.config)
