specify table:
- before: |
    M = require "std.table"

    extends      = table
    enhancements = { "sort" }
    extensions   = { "clone", "clone_rename", "empty", "invert", "keys",
                     "merge", "new", "pack", "ripairs", "size", "totable",
                     "values" }

- context when required:
  - before:
      enhanced = {}
      for _, api in ipairs (enhancements) do enhanced[api] = true end

  - context by name:
    - before: |
        function restore (g, m)
          for _, api in ipairs (enhancements) do
            g[api], g["_" .. api] = m[api], m["_" .. api]
          end
          for _, api in ipairs (extensions) do g[api] = m[api] end
        end

        for _, api in ipairs (enhancements) do
          extends[api] = M["_" .. api]
        end
        for _, api in ipairs (extensions) do extends[api] = nil end
    - after:
        restore (extends, M)
    - it does not perturb the global table:
        for _, api in ipairs (extensions) do
          expect (extends[api]).should_be (nil)
        end
        for _, api in ipairs (enhancements) do
          expect (extends[api]).should_be (M["_" .. api])
        end
    - it contains all global access points:
        for api in pairs (extends) do
          if enhanced[api] then
            expect (M[api]).should_not_be (extends[api])
          else
            expect (M[api]).should_be (extends[api])
          end
        end

  - context via the std module:
    - before:
        require "std"
    - it adds extension apis to the global table:
        for api in pairs (M) do
          expect (extends[api]).should_be (M[api])
        end
    - it does not add any other global access points:
        for api in pairs (extends) do
          if not enhanced[api] then
            expect (M[api]).should_be (extends[api])
          end
        end


- describe clone:
  - before:
      subject = { k1 = {"v1"}, k2 = {"v2"}, k3 = {"v3"} }
      f       = M.clone
  - it does not just return the subject:
      expect (f (subject)).should_not_be (subject)
  - it does copy the subject:
      expect (f (subject)).should_equal (subject)
  - it only makes a shallow copy:
      expect (f (subject).k1).should_be (subject.k1)
  - the original subject is not perturbed:
      target = { k1 = subject.k1, k2 = subject.k2, k3 = subject.k3 }
      copy   = f (subject)
      expect (subject).should_equal (target)
      expect (subject).should_be (subject)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")


- describe clone_rename:
  - before:
      subject = { k1 = {"v1"}, k2 = {"v2"}, k3 = {"v3"} }
      f       = M.clone_rename
  - it does not just return the subject:
      expect (f ({}, subject)).should_not_be (subject)
  - it copies the subject:
      expect (f ({}, subject)).should_equal (subject)
  - it only makes a shallow copy:
      expect (f ({}, subject).k2).should_be (subject.k2)

  - context when renaming some keys:
    - before:
        target = { newkey = subject.k1, k2 = subject.k2, k3 = subject.k3 }
    - it renames during cloning:
        expect (f ({k1 = "newkey"}, subject)).should_equal (target)
    - it does not perturb the value in the renamed key field:
        expect (f ({k1 = "newkey"}, subject).newkey).should_be (subject.k1)

  - "it diagnoses non-table arguments":
      expect (f {}).should_error ("table expected")
      expect (f ({}, "foo")).should_error ("table expected")


- describe empty:
  - before:
      f = M.empty
  - it returns true for an empty table:
      expect (f {}).should_be (true)
      expect (f {nil}).should_be (true)
  - "it returns false for a non-empty table":
      expect (f {"stuff"}).should_be (false)
      expect (f {{}}).should_be (false)
      expect (f {false}).should_be (false)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")


- describe invert:
  - before:
      subject = { k1 = 1, k2 = 2, k3 = 3 }
      f       = M.invert
  - it returns a new table:
      expect (f (subject)).should_not_be (subject)
  - it inverts keys and values in the returned table:
      expect (f (subject)).should_equal { "k1", "k2", "k3" }
  - it is reversible:
      expect (f (f (subject))).should_equal (subject)
  - "it seems to copy a list of 1..n numbers":
      subject = { 1, 2, 3 }
      expect (f (subject)).should_equal (subject)
      expect (f (subject)).should_not_be (subject)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")


- describe keys:
  - before:
      subject = { k1 = 1, k2 = 2, k3 = 3 }
      f       = M.keys
  - it returns an empty list when subject is empty:
      expect (f {}).should_equal {}
  - it makes a list of table keys:
      cmp = function (a, b) return a < b end
      expect (M.sort (f (subject), cmp)).should_equal {"k1", "k2", "k3"}
  - it does not guarantee stable ordering:
      subject = {}
      -- is this a good test? there is a vanishingly small possibility the
      -- returned table will have all 10000 keys in the same order...
      for i = 10000, 1, -1 do table.insert (subject, i) end
      expect (f (subject)).should_not_equal (subject)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")


- describe merge:
  - before: |
      -- Additional merge keys which are moderately unusual
      t1 = { k1 = {"v1"}, k2 = "if", k3 = {"?"} }
      t2 = { ["if"] = true, [{"?"}] = false, _ = "underscore", k3 = t1.k1 }
      f  = M.merge

      target = {}
      for k, v in pairs (t1) do target[k] = v end
      for k, v in pairs (t2) do target[k] = v end
  - it does not create a whole new table:
      expect (f (t1, t2)).should_be (t1)
  - it does not change t1 when t2 is empty:
      expect (f (t1, {})).should_be (t1)
  - it copies t2 when t1 is empty:
      expect (f ({}, t1)).should_not_be (t1)
      expect (f ({}, t1)).should_equal (t1)
  - it merges keys from t2 into t1:
      expect (f (t1, t2)).should_equal (target)
  - it gives precedence to values from t2:
      original = M.clone (t1)
      m = f (t1, t2)      -- Merge is destructive, do it once only.
      expect (m.k3).should_be (t2.k3)
      expect (m.k3).should_not_be (original.k3)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f ("foo", "bar")).should_error ("table expected")


- describe new:
  - before:
      f = M.new

  - context when not setting a default:
    - before: default = nil
    - it returns a new table when nil is passed:
        expect (f (default, nil)).should_equal {}
    - it returns any table passed in:
        t = { "unique table" }
        expect (f (default, t)).should_be (t)

  - context when setting a default:
    - before:
        default = "default"
    - it returns a new table when nil is passed:
        expect (f (default, nil)).should_equal {}
    - it returns any table passed in:
        t = { "unique table" }
        expect (f (default, t)).should_be (t)

  - it returns the stored value for existing keys:
      t = f ("default")
      v = { "unique value" }
      t[1] = v
      expect (t[1]).should_be (v)
  - it returns the constructor default for unset keys:
      t = f ("default")
      expect (t[1]).should_be "default"
  - it returns the actual default object:
      default = { "unique object" }
      t = f (default)
      expect (t[1]).should_be (default)
  - "it diagnoses non-tables/non-nil in the second argument":
      expect (f (nil, "foo")).should_error ("table expected")


- describe pack:


- describe ripairs:


- describe size:
  - before: |
      --          - 1 -  --------- 2 ----------  -- 3 --
      subject = { "one", { { "two" }, "three" }, four = 5 }
      f = M.size
  - it counts the number of keys in a table:
      expect (f (subject)).should_be (3)
  - it counts no keys in an empty table:
      expect (f {}).should_be (0)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")


- describe sort:
  - before:
      subject = { 5, 2, 4, 1, 0, 3 }
      target  = { 0, 1, 2, 3, 4, 5 }
      cmp     = function (a, b) return a < b end
      f       = M.sort
  - it sorts elements in place:
      f (subject, cmp)
      expect (subject).should_equal (target)
  - it returns the sorted table:
      expect (f (subject, cmp)).should_equal (target)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")


- describe totable:


- describe values:
  - before:
      subject = { k1 = {1}, k2 = {2}, k3 = {3} }
      f       = M.values
  - it returns an empty list when subject is empty:
      expect (f {}).should_equal {}
  - it makes a list of table values:
      cmp = function (a, b) return a[1] < b[1] end
      expect (M.sort (f (subject), cmp)).should_equal {{1}, {2}, {3}}
  - it does guarantee stable ordering:
      subject = {}
      -- is this a good test? or just requiring an implementation quirk?
      for i = 10000, 1, -1 do table.insert (subject, i) end
      expect (f (subject)).should_equal (subject)
  - "it diagnoses non-table arguments":
      expect (f ()).should_error ("table expected")
      expect (f "foo").should_error ("table expected")
