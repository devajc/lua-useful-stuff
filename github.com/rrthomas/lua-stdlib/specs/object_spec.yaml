before:
  object = require "std.object"

specify object:
- describe new:
  - it serves as a prototype for new Object instances:
      obj = object.new {}
      expect (obj).should_not_be (object.new)
      expect (type (obj)).should_be "table"
      expect (object.type (obj)).should_be "object"

- describe type:
  - it supports calling the module to create a new instance:
      obj = object {}
      expect (obj).should_not_be (object.Object)
      expect (type (obj)).should_be "table"
      expect (object.type (obj)).should_be "object"
  - it creates objects that can report their own type: |
      obj = object {}
      expect (obj:type ()).should_be "object"
  - it supports setting the object type during instantiation:
      Example = object {_type = "example"}
      expect (object.type (Example)).should_be "example"
  - it instantiates additional factory objects:
      Factory = object {_type = "factory"}
      obj = Factory {}
      expect (obj).should_not_be.any_of {object, Factory}
      expect (object.type (obj)).should_be "factory"

- describe Object instantiation from a prototype:
  - context when _init is a table of field names:
    - before:
        Proto = object {_type = "proto", f1 = "proto1", f2 = "proto2",
                        _init = {"f1", "f2"}}
    - it sets user-defined fields during cloning:
        expect ({Proto.f1, Proto.f2}).should_equal {"proto1", "proto2"}
    - it sets user-defined fields from positional parameters:
        instance = Proto {"instance1", "instance2"}
        expect ({instance.f1, instance.f2}).
          should_equal {"instance1", "instance2"}
    - it uses prototype values for missing positional parameters:
        instance = Proto {"instance1"}
        expect ({instance.f1, instance.f2}).
          should_equal {"instance1", "proto2"}
    - it merges surplus positional parameters into array part of new object:
        instance = Proto {"instance1", "instance2", "instance3"}
        expect ({instance.f1, instance.f2, instance[3]}).
          should_equal {"instance1", "instance2", "instance3"}
        pending "seems odd to instantiate offset 3 without instantiating 1 and 2?"
        expect (instance[1]).should_be "instance3"
        pending "or maybe more idiomatic to discard surplus arguments?"
        expect (instance {_type = "table"}).should_not_contain "instance3"

  - context when _init is a function:
    - before:
        Proto = object { _type = "proto",
                         f1 = "proto1", f2 = "proto2",
                         _init = function (self, ...)
                                   self.args = unpack {...}
                                   return self
                                 end,
                       }
    - it passes user defined fields to custom _init function:
        instance = Proto {"param1", "param2"}
        expect ({instance.f1, instance.f2, instance.args}).
          should_equal {"proto1", "proto2", {"param1", "param2"}}

- describe object access:
  - before:
      Prototype = object    {_type  = "prototype",
                             _init  = { "field", "method"},
                             field  = "in prototype",
                             method = function (self, ...)
                                        return object.type (self) .. " class, " ..
                                               table.concat ({...}, ", ")
                                      end,
                            }
      instance  = Prototype {"in object", function (self, ...)
                                            return object.type (self) .. " instance, " ..
                                                   table.concat ({...}, ", ")
                                          end,
                            }

  - it provides object field access with dot notation:
      expect (instance.field).should_be "in object"
  - it provides class field acces with dot notation:
      expect (Prototype.field).should_be "in prototype"
  - it provides object method acces with colon notation:
      expect (instance:method "object method call").
        should_be "prototype instance, object method call"
  - it provides class method access with class dot notation:
      expect (Prototype.method (instance, "class method call")).
        should_be "prototype class, class method call"
  - it allows new instance fields to be added:
      instance.newfield = "new"
      expect (instance.newfield).should_be "new"
  - it allows new instance methods to be added:
      instance.newmethod = function (self)
                             return object.type (self) .. ", new instance method"
                           end
      expect (instance:newmethod ()).should_be "prototype, new instance method"
  - it allows new class methods to be added:
      Prototype.newmethod = function (self)
                              return object.type (self) .. ", new class method"
                            end
      expect (Prototype.newmethod (instance)).
        should_be "prototype, new class method"


- describe __totable:
  - before:
      totable = (require "std.table").totable
      derived = object {_type = "derived", "one", "two", three = true}

  - it returns a table:
      expect (object.type (totable (derived))).should_be "table"
  - it contains all non-hidden fields of object:
      expect (totable (derived)).should_contain.all_of {"one", "two", "three"}
  - it does not contain any hidden fields of object:
      expect (totable (derived)).should_equal {"one", "two", three = true}


- describe __tostring:
  - before:
      obj = object {_type = "derived", "one", "two", "three"}
  - it returns a string:
      expect (type (tostring (obj))).should_be "string"
  - it contains the type:
      expect (tostring (object {})).should_contain "object"
      expect (tostring (obj)).should_contain (object.type (obj))
  - it contains the ordered array part elements:
      expect (tostring (obj)).should_contain "one, two, three"
  - it contains the ordered dictionary part elements:
      expect (tostring (object {one = true, two = true, three = true})).
        should_contain "one=true, three=true, two=true"
      expect (tostring (obj {one = true, two = true, three = true})).
        should_contain "one=true, three=true, two=true"
  - it contains a ';' separator only when object has array and dictionary parts:
      expect (tostring (obj)).should_not_contain ";"
      expect (tostring (object {one = true, two = true, three = true})).
        should_not_contain ";"
      expect (tostring (obj {one = true, two = true, three = true})).
        should_contain ";"
