specify string:
- before: |
    M = require "std.string"

    extends      = string
    enhancements = { "assert", "format", "tostring" }
    extensions   = { "caps", "chomp", "escape_pattern", "escape_shell",
                     "finds", "ltrim", "numbertosi", "ordinal_suffix",
                     "pad", "pickle", "prettytostring", "render",
                     "require_version", "rtrim", "split", "tfind",
                     "trim", "wrap",
                     -- make these available after require "std"
                     "__index", "_format", "_tostring",
                     -- camelCase compatibility:
                     "escapePattern", "escapeShell", "ordinalSuffix" }

    subject = "a string \n\n"


- context when required:
  - before:
      enhanced = {}
      for _, api in ipairs (enhancements) do enhanced[api] = true end

  - context by name:
    - before: |
        for _, api in ipairs (enhancements) do
          extends[api] = M["_" .. api]
        end
        for _, api in ipairs (extensions) do extends[api] = nil end
    - after:
        for _, api in ipairs (enhancements) do
          extends[api], extends["_" .. api] = M[api], M["_" .. api]
        end
        for _, api in ipairs (extensions) do extends[api] = M[api] end
    - it does not perturb the global table:
        for _, api in ipairs (extensions) do
          expect (extends[api]).should_be (nil)
        end
        for _, api in ipairs (enhancements) do
          expect (extends[api]).should_be (M["_" .. api])
        end
    - it contains all global access points:
        for api in pairs (extends) do
          if enhanced[api] then
            expect (M[api]).should_not_be (extends[api])
          else
            expect (M[api]).should_be (extends[api])
          end
        end

  - context via the std module:
    - before:
        require "std"
    - it adds extension apis to the global table:
        for api in pairs (M) do
          expect (extends[api]).should_be (M[api])
        end
    - it does not add any other global access points:
        for api in pairs (extends) do
          if not enhanced[api] then
            expect (M[api]).should_be (extends[api])
          end
        end


- "describe ..":
  - it concatenates string arguments:
      target = "a string \n\n another string"
      expect (subject .. " another string").should_be (target)
  - "it stringifies non-string arguments":
      argument = { "a table" }
      expect (subject .. argument).should_match (string.format ("%s{1=a table}", subject))
  - it stringifies nil arguments:
      argument = nil
      expect (subject .. argument).should_be (string.format ("%s%s", subject, tostring (argument)))
  - the original subject is not perturbed:
      original = subject
      newstring = subject .. " concatenate something"
      expect (subject).should_be (original)


- describe assert:


- describe caps:
  - before:
      f = M.caps
  - it capitalises words of a string:
      target = "A String \n\n"
      expect (f (subject)).should_be (target)
  - it changes only the first letter of each word:
      expect (f "a stRiNg").should_be "A StRiNg"
  - it is available as a string metamethod:
      expect (("a stRiNg"):caps ()).should_be "A StRiNg"
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject)
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe chomp:
  - before:
      f = M.chomp
      target = "a string \n"
  - it removes a single trailing newline from a string:
      expect (f (subject)).should_be (target)
  - it does not change a string with no trailing newline:
      subject = "a string "
      expect (f (subject)).should_be (subject)
  - it is available as a string metamethod:
      expect (subject:chomp ()).should_be (target)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject)
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe escape_pattern:
  - before: |
      f = M.escape_pattern

      magic = {}
      meta = "^$()%.[]*+-?"
      for i = 1, string.len (meta) do
        magic[meta:sub (i, i)] = true
      end

  - context with each printable ASCII char:
    - before:
        subject, target = "", ""
        for c = 32, 126 do
          s = string.char (c)
          subject = subject .. s
          if magic[s] then target = target .. "%" end
          target = target .. s
        end
    - "it inserts a % before any non-alphanumeric in a string":
        expect (f (subject)).should_be (target)
    - it is available as a string metamethod:
        expect (subject:escape_pattern ()).should_be (target)
  - legacy escapePattern call is the same function:
      expect (M.escapePattern).should_be (f)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject)
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe escape_shell:
  - before:
      f = M.escape_shell
  - context with each printable ASCII char:
    - before:
        subject, target = "", ""
        for c = 32, 126 do
          s = string.char (c)
          subject = subject .. s
          if s:match ("[][ ()\\\"']") then target = target .. "\\" end
          target = target .. s
        end
    - "it inserts a \\ before any shell metacharacters":
        expect (f (subject)).should_be (target)
    - it is available as a string metamethod:
        expect (subject:escape_shell ()).should_be (target)
  - legacy escapeShell call is the same function:
      expect (M.escapeShell).should_be (f)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject)
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe finds:
  - before:
      subject = "abcd"
      f = M.finds
  - context given a complex nested list:
    - before:
        target = { { 1, 2; capt = { "a", "b" } }, { 3, 4; capt = { "c", "d" } } }
    - it creates a list of pattern captures:
        expect ({f (subject, "(.)(.)")}).should_equal ({ target })
    - it is available as a string metamethod:
        expect ({subject:finds ("(.)(.)")}).should_equal ({ target })
  - it creates an empty list where no captures are matched:
      target = {}
      expect ({f (subject, "(x)")}).should_equal ({ target })
  - it creates an empty list for a pattern without captures:
      target = { { 1, 1; capt = {} } }
      expect ({f (subject, "a")}).should_equal ({ target })
  - it starts the search at a specified index into the subject:
      target = { { 8, 9; capt = { "a", "b" } }, { 10, 11; capt = { "c", "d" } } }
      expect ({f ("garbage" .. subject, "(.)(.)", 8)}).should_equal ({ target })
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, "...")
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


# FIXME: This looks like a misfeature to me, let's remove it!
- describe format:
  - before: |
      subject = "string: %s, number: %d"
      f = M.format
  - it returns a single argument without attempting formatting:
      expect (f (subject)).should_be (subject)
  - it is available as a string metamethod:
      expect (subject:format ()).should_be (subject)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject)
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f (nil, "arg")).should_error ("string expected")
      expect (f ({"a table"}, "arg")).should_error ("string expected")


- describe ltrim:
  - before:
      subject = " \t\r\n  a  short  string  \t\r\n   "
      f = M.ltrim
  - it removes whitespace from the start of a string:
      target = "a  short  string  \t\r\n   "
      expect (f (subject)).should_equal (target)
  - it supports custom removal patterns:
      target = "\r\n  a  short  string  \t\r\n   "
      expect (f (subject, "[ \t\n]+")).should_equal (target)
  - it is available as a string metamethod:
      target = "\r\n  a  short  string  \t\r\n   "
      expect (subject:ltrim ("[ \t\n]+")).should_equal (target)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, "%W")
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe numbertosi:
  - before:
      f = M.numbertosi
  - it returns a number using SI suffixes:
      target = {"1e-9", "1y", "1z", "1a", "1f", "1p", "1n", "1mu", "1m", "1",
                "1k", "1M", "1G", "1T", "1P", "1E", "1Z", "1Y", "1e9"}
      subject = {}
      for n = -28, 28, 3 do
        m = 10 * (10 ^ n)
        table.insert (subject, f (m))
      end
      expect (subject).should_equal (target)
  - it coerces string arguments to a number:
      expect (f "1000").should_be "1k"
  - "it diagnoses non-numeric arguments":
      expect (f ()).should_error ("attempt to perform arithmetic")
      expect (f {"a table"}).should_error ("number expected")


- describe ordinal_suffix:
  - before:
      f = M.ordinal_suffix
  - it returns the English suffix for a number:
      subject, target = {}, {}
      for n = -120, 120 do
        suffix = "th"
        m = math.abs (n) % 10
        if m == 1 and math.abs (n) % 100 ~= 11 then suffix = "st"
        elseif m == 2 and math.abs (n) % 100 ~= 12 then suffix = "nd"
        elseif m == 3 and math.abs (n) % 100 ~= 13 then suffix = "rd"
        end
        table.insert (target, n .. suffix)
        table.insert (subject, n .. f (n))
      end
      expect (subject).should_equal (target)
  - legacy ordinalSuffix call is the same function:
      expect (M.ordinalSuffix).should_be (f)
  - it coerces string arguments to a number:
      expect (f "-91").should_be "st"
  - "it diagnoses non-numeric arguments":
      expect (f ()).should_error ("number expected")
      expect (f {"a table"}).should_error ("number expected")


- describe pad:
  - before:
      width = 20
      f = M.pad

  - context when string is shorter than given width:
    - before:
        subject = "short string"
    - it right pads a string to the given width with spaces:
        target = "short string        "
        expect (f (subject, width)).should_be (target)
    - it left pads a string to the given negative width with spaces:
        width = -width
        target = "        short string"
        expect (f (subject, width)).should_be (target)
    - it is available as a string metamethod:
        target = "short string        "
        expect (subject:pad (width)).should_be (target)

  - context when string is longer than given width:
    - before:
        subject = "a string that's longer than twenty characters"
    - it truncates a string to the given width:
        target = "a string that's long"
        expect (f (subject, width)).should_be (target)
    - it left pads a string to given width with spaces:
        width = -width
        target = "an twenty characters"
        expect (f (subject, width)).should_be (target)
    - it is available as a string metamethod:
        target = "a string that's long"
        expect (subject:pad (width)).should_be (target)

  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, width)
      expect (subject).should_be (original)
  - "it coerces non-string arguments to a string":
      expect (f ({ "a table" }, width)).should_contain "a table"
  - "it diagnoses non-numeric width arguments":
      expect (f (subject, nil)).should_error ("number expected")
      expect (f (subject, {"a table"})).should_error ("number expected")


- describe pickle:


- describe prettytostring:
  - before:
      f = M.prettytostring
  - it renders nil exactly like system tostring:
      expect (f (nil)).should_be (tostring (nil))
  - it renders booleans exactly like system tostring:
      expect (f (true)).should_be (tostring (true))
      expect (f (false)).should_be (tostring (false))
  - it renders numbers exactly like system tostring:
      n = 8723643
      expect (f (n)).should_be (tostring (n))
  - it renders functions exactly like system tostring:
      expect (f (f)).should_be (tostring (f))
  - it renders strings with format "%q" styling:
      s = "a string"
      expect (f (s)).should_be (string.format ("%q", s))
  - it renders empty tables as a pair of braces:
      expect (f {}).should_be ("{\n}")
  - it renders an array prettily:
      a = {"one", "two", "three"}
      expect (f (a, "")).
        should_be '{\n[1] = "one",\n[2] = "two",\n[3] = "three",\n}'
  - it renders a table prettily:
      t = { one = true, two = 2, three = {3}}
      expect (f (t, "")).
        should_be '{\none = true,\nthree =\n{\n[1] = 3,\n},\ntwo = 2,\n}'
  - it renders table keys in table.sort order:
      t = { one = 3, two = 5, three = 4, four = 2, five = 1 }
      expect (f (t, "")).
        should_be '{\nfive = 1,\nfour = 2,\none = 3,\nthree = 4,\ntwo = 5,\n}'
  - it renders keys with invalid symbol names in long hand:
      t = { _ = 0, word = 0, ["?"] = 1, ["a-key"] = 1, ["[]"] = 1 }
      expect (f (t, "")).
        should_be '{\n["?"] = 1,\n["[]"] = 1,\n_ = 0,\n["a-key"] = 1,\nword = 0,\n}'


- describe render:


- describe require_version:


- describe rtrim:
  - before:
      subject = " \t\r\n  a  short  string  \t\r\n   "
      f = M.rtrim
  - it removes whitespace from the end of a string:
      target = " \t\r\n  a  short  string"
      expect (f (subject)).should_equal (target)
  - it supports custom removal patterns:
      target = " \t\r\n  a  short  string  \t\r"
      expect (f (subject, "[ \t\n]+")).should_equal (target)
  - it is available as a string metamethod:
      target = " \t\r\n  a  short  string  \t\r"
      expect (subject:rtrim ("[ \t\n]+")).should_equal (target)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, "%W")
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe split:
  - before:
      target = { "first", "the second one", "final entry" }
      subject = table.concat (target, ", ")
      f = M.split
  - it makes a table of substrings delimited by a separator:
      expect (f (subject,  ", ")).should_equal (target)
  - it is available as a string metamethod:
      expect (subject:split ", ").should_equal (target)
      expect (("/foo/bar/baz.quux"):split "/").should_equal {"", "foo", "bar", "baz.quux"}
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, "e")
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ("a string")).should_error ("string expected")
      expect (f (nil, ",")).should_error ("string expected")
      expect (f ({"a table"}, ",")).should_error ("string expected")


- describe tfind:
  - before:
      subject = "abc"
      f = M.tfind
  - it creates a list of pattern captures:
      target = { 1, 3, { "a", "b", "c" } }
      expect ({f (subject, "(.)(.)(.)")}).should_equal (target)
  - it creates an empty list where no captures are matched:
      target = { nil, nil, {} }
      expect ({f (subject, "(x)(y)(z)")}).should_equal (target)
  - it creates an empty list for a pattern without captures:
      target = { 1, 1, {} }
      expect ({f (subject, "a")}).should_equal (target)
  - it starts the search at a specified index into the subject:
      target = { 8, 10, { "a", "b", "c" } }
      expect ({f ("garbage" .. subject, "(.)(.)(.)", 8)}).should_equal (target)
  - it is available as a string metamethod:
      target = { 8, 10, { "a", "b", "c" } }
      expect ({("garbage" .. subject):tfind ("(.)(.)(.)", 8)}).should_equal (target)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, "...")
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe tostring:


- describe trim:
  - before:
      subject = " \t\r\n  a  short  string  \t\r\n   "
      f = M.trim
  - it removes whitespace from each end of a string:
      target = "a  short  string"
      expect (f (subject)).should_equal (target)
  - it supports custom removal patterns:
      target = "\r\n  a  short  string  \t\r"
      expect (f (subject, "[ \t\n]+")).should_equal (target)
  - it is available as a string metamethod:
      target = "\r\n  a  short  string  \t\r"
      expect (subject:trim ("[ \t\n]+")).should_equal (target)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, "%W")
      expect (subject).should_be (original)
  - "it diagnoses non-string arguments":
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")


- describe wrap:
  - before:
      subject = "This is a collection of Lua libraries for Lua 5.1 " ..
        "and 5.2. The libraries are copyright by their authors 2000" ..
        "-2013 (see the AUTHORS file for details), and released und" ..
        "er the MIT license (the same license as Lua itself). There" ..
        " is no warranty."
      f = M.wrap
  - it inserts newlines to wrap a string:
      target = "This is a collection of Lua libraries for Lua 5.1 a" ..
        "nd 5.2. The libraries are\ncopyright by their authors 2000" ..
        "-2013 (see the AUTHORS file for details), and\nreleased un" ..
        "der the MIT license (the same license as Lua itself). Ther" ..
        "e is no\nwarranty."
      expect (f (subject)).should_be (target)
  - it honours a column width parameter:
      target = "This is a collection of Lua libraries for Lua 5.1 a" ..
        "nd 5.2. The libraries\nare copyright by their authors 2000" ..
        "-2013 (see the AUTHORS file for\ndetails), and released un" ..
        "der the MIT license (the same license as Lua\nitself). The" ..
        "re is no warranty."
      expect (f (subject, 72)).should_be (target)
  - it supports indenting by a fixed number of columns:
      target = "        This is a collection of Lua libraries for L" ..
        "ua 5.1 and 5.2. The\n        libraries are copyright by th" ..
        "eir authors 2000-2013 (see the\n        AUTHORS file for d" ..
        "etails), and released under the MIT license\n        (the " ..
        "same license as Lua itself). There is no warranty."
      expect (f (subject, 72, 8)).should_be (target)
  - context given a long unwrapped string:
    - before:
        target = "    This is a collection of Lua libraries for Lua 5" ..
          ".1 and 5.2.\n  The libraries are copyright by their author" ..
          "s 2000-2013 (see\n  the AUTHORS file for details), and rel" ..
          "eased under the MIT\n  license (the same license as Lua it" ..
          "self). There is no\n  warranty."
    - it can indent the first line differently:
        expect (f (subject, 64, 2, 4)).should_be (target)
    - it is available as a string metamethod:
        expect (subject:wrap (64, 2, 4)).should_be (target)
  - the original subject is not perturbed:
      original = subject
      newstring = f (subject, 55, 5)
      expect (subject).should_be (original)
  - it diagnoses indent greater than line width:
      expect (f (subject, 10, 12)).should_error ("less than the line width")
      expect (f (subject, 99, 99)).should_error ("less than the line width")
  - it diagnoses non-string arguments:
      expect (f ()).should_error ("string expected")
      expect (f {"a table"}).should_error ("string expected")
