--------------------------------------------------------------------------------
-- generate_context_extensions_list.lua: api context extensions list generator
-- This file is a part of pk-tools library
-- Copyright (c) Alexander Gladysh <ag@logiceditor.com>
-- Copyright (c) Dmitry Potapov <dp@logiceditor.com>
-- See file `COPYRIGHT` for the license
--------------------------------------------------------------------------------

local arguments
      = import 'lua-nucleo/args.lua'
      {
        'arguments'
      }

local make_concatter
      = import 'lua-nucleo/string.lua'
      {
        'make_concatter'
      }

local create_path_to_file,
      write_file
      = import 'lua-aplicado/filesystem.lua'
      {
        'create_path_to_file',
        'write_file'
      }

local walk_tagged_tree
      = import 'pk-core/tagged-tree.lua'
      {
        'walk_tagged_tree'
      }

local make_loggers
      = import 'pk-core/log.lua'
      {
        'make_loggers'
      }

--------------------------------------------------------------------------------

local log, dbg, spam, log_error = make_loggers(
    "generate_context_extensions_list", "GCL"
  )

--------------------------------------------------------------------------------

local generate_context_extensions_list
do
  local down = { }

  local up = { }
  do
    up["api:extend_context"] = function(walkers, data)
      walkers.cat_ [[
  { name = ]] (("%q"):format(data.name)) [[, ]] (
      ("%q"):format(
          walkers.handlers_dir_name_
       .. "/" .. (data.filename)
        )
    ) [[ };
]]
    end
  end

  generate_context_extensions_list = function(
      schema,
      file_name,
      out_file_root,
      handlers_dir_name,
      file_header
    )
    arguments(
        "table", schema,
        "string", file_name,
        "string", out_file_root,
        "string", handlers_dir_name,
        "string", file_header
      )
    local cat, concat = make_concatter()
    local walkers =
    {
      down = down;
      up = up;
      --
      cat_ = cat;
      concat_ = concat;
      export_names_ = nil;
      out_file_name_ = file_name;
      out_file_root_ = out_file_root;
      handlers_dir_name_ = handlers_dir_name;
    }

    for i = 1, #schema do
      walk_tagged_tree(schema[i], walkers, "id")
    end

    file_name = walkers.out_file_root_ .. file_name

    log("generating context extensions list to", file_name)
    assert(create_path_to_file(file_name))
    assert(
        write_file(
            file_name,
            [[
--------------------------------------------------------------------------------
-- generated context extensions list for client api
]] .. file_header .. [[
--------------------------------------------------------------------------------
-- WARNING! Do not change manually.
--          Generated by apigen.lua
--------------------------------------------------------------------------------

local EXTENSIONS =
{
]] .. walkers.concat_() .. [[}

return
{
  EXTENSIONS = EXTENSIONS;
}
]]
          )
      )
  end
end

--------------------------------------------------------------------------------

return
{
  generate_context_extensions_list = generate_context_extensions_list;
}
