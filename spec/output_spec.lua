
local getoutput = function(...)
  local success, message = pcall(assert.are.equal, ...)
  return message
end


describe("Output testing using string comparison with the equal assertion", function()
  it("Should compare strings correctly; nil-string", function()
    --assert.are.equal(nil, "string")
    local output = getoutput(nil, "string")
    local ok = output:find("Passed in:\n%(string%) 'string'")
    assert(ok, "Output check 1 failed, comparing nil-string;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(nil%)")
    assert(ok, "Output check 2 failed, comparing nil-string;\n    " .. output:gsub("\n","\n    "))
  end)

  it("Should compare strings correctly; nil-string-nil", function()
    --assert.are.equal(nil, "string", nil)
    local output = getoutput(nil, "string", nil)
    local ok = output:find("Passed in:\n%(string%) 'string'")
    assert(ok, "Output check 1 failed, comparing nil-string-nil;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(nil%)")
    assert(ok, "Output check 2 failed, comparing nil-string-nil;\n    " .. output:gsub("\n","\n    "))
  end)

  it("Should compare strings correctly; nil-string-string", function()
    --assert.are.equal(nil, "string", "string")
    local output = getoutput(nil, "string", "string")
    local ok = output:find("Passed in:\n%(string%) 'string'")
    assert(ok, "Output check 1 failed, comparing nil-string-string;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(nil%)")
    assert(ok, "Output check 2 failed, comparing nil-string-string;\n    " .. output:gsub("\n","\n    "))
  end)

  it("Should compare strings correctly; string-nil", function()
    --assert.are.equal("string", nil)
    local output = getoutput("string", nil)
    local ok = output:find("Passed in:\n%(nil%)")
    assert(ok, "Output check 1 failed, comparing string-nil;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(string%) 'string'")
    assert(ok, "Output check 2 failed, comparing string-nil;\n    " .. output:gsub("\n","\n    "))
  end)

  it("Should compare strings correctly; string-nil-nil", function()
    --assert.are.equal("string", nil, nil)
    local output = getoutput("string", nil)
    local ok = output:find("Passed in:\n%(nil%)")
    assert(ok, "Output check 1 failed, comparing string-nil-nil;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(string%) 'string'")
    assert(ok, "Output check 2 failed, comparing string-nil-nil;\n    " .. output:gsub("\n","\n    "))
  end)

  it("Should compare strings correctly; string-string-nil", function()
    --assert.are.equal("string", "string", nil)
    local output = getoutput("string", nil)
    local ok = output:find("Passed in:\n%(nil%)")
    assert(ok, "Output check 1 failed, comparing string-string-nil;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(string%) 'string'")
    assert(ok, "Output check 2 failed, comparing string-string-nil;\n    " .. output:gsub("\n","\n    "))
  end)

  it("Should compare strings correctly; string-nil-string", function()
    --assert.are.equal("string", nil, "string")
    local output = getoutput("string", nil)
    local ok = output:find("Passed in:\n%(nil%)")
    assert(ok, "Output check 1 failed, comparing string-nil-string;\n    " .. output:gsub("\n","\n    "))
    local ok = output:find("Expected:\n%(string%) 'string'")
    assert(ok, "Output check 2 failed, comparing string-nil-string;\n    " .. output:gsub("\n","\n    "))
  end)

end)
