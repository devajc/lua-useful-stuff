doc:text "04_basics"
[[
${h1:Базовые положения}

Клиент совершает вызовы API путём выполнения HTTP **POST**-запроса к серверу.
(Аргументы GET-запросов **не** обрабатываются).

Сервер отдаёт данные в виде XML (есть возможность отдачи в JSON,
см. ${/:config}).

## О структуре описания данных

В описании протокола *КУРСИВОМ* даны типы данных (см. в конце документа),
подставляемых при передаче.

Например:

`u=`${T:ACCOUNT_ID}`&s=`${T:SESSION_ID}

В реальной жизни:

`u=32&s=ab699c68-2f8a-4f6b-a4a4-63082b29f2ae`

${h2:Общий формат ответа при ошибке}\index{Ошибки}

${h4:XML}

        <error id="${!:ERROR_CODE}" />

${h4:JSON}

        { "error" : { "id" : "${!:ERROR_CODE}" } }

${h4:Lua}

        nil, "${!:ERROR_CODE}"

${h3:Стандартные коды ошибок}

Могут быть возвращены в ответ на любой запрос

* ${!:BAD_INPUT} — присланы неверные данные`
* ${!:INTERNAL_ERROR} — сервер корёжит, написать пользователю и пробовать
  перепослать запрос с экспоненциально возрастающим временем ожидания
* ${!:FATAL_ERROR} — сервер скопытился, попросить пользователя обратиться в
  службу поддержки (повторный запрос инициируется пользователем)
* ${!:NOT_IMPLEMENTED} — запрос ещё не реализован, попросить пользователя
  обратиться в службу поддержки (повторный запрос инициируется пользователем).

${h2:Константы}

Для разных партнёров (соцсетей)  и разных игр собираются разные флешки.
Во флешке должны быть зашиты следующие константы:

* `config_url` : string — URL запроса настроек клиента.
  Пример: http://example.com/config
* `partner_id` : ${T:PARTNER_ID} — идентификатор партнёра (см.)

${endofsection}
]]
